require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MeetingsController do

  # This should return the minimal set of attributes required to create a valid
  # Meeting. As you add validations to Meeting, be sure to
  # update the return value of this method accordingly.
  # def valid_attributes
  #   {}
  # end

  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # MeetingsController. Be sure to keep this updated too.
  # def valid_session
  #   {}
  # end

  describe "GET index" do
    it "assigns all meetings as @meetings when not authenticated" do
      meeting = FactoryGirl.create :meeting
      get :index
      assigns(:meetings).should eq([meeting])
    end

    it "assigns my meetings to @my_meetings, and other to @meetings when authenticated" do
      m1 = FactoryGirl.create :meeting
      m2 = FactoryGirl.create :meeting
      sign_in m1.user
      get :index
      assigns(:meetings).should eq([m2])
      assigns(:my_meetings).should eq([m1])
    end
  end

  describe "GET show" do
    it "assigns the requested meeting as @meeting" do
      meeting = FactoryGirl.create :meeting
      get :show, {:id => meeting.to_param}
      assigns(:meeting).should eq(meeting)
    end
  end

  describe "GET new" do
    it "should redirect when not authenticated" do
      get :new
      expect(response).to redirect_to(new_user_session_path)
    end

    it "should assign @meeting to new meeting when authenticated" do
      user = FactoryGirl.create :user
      sign_in user
      get :new
      assigns(:meeting).should be_a_new(Meeting)
      expect(response).to render_template("new")
    end
  end

  describe "GET edit" do
    it "should redirect when not authenticated" do
      m = FactoryGirl.create :meeting
      get :edit, {:id => m.to_param}
      expect(response).to redirect_to(new_user_session_path)
    end
    
    it "assigns the requested meeting as @meeting" do
      meeting = FactoryGirl.create :meeting
      sign_in meeting.user
      get :edit, {:id => meeting.to_param}
      assigns(:meeting).should eq(meeting)
      expect(response).to render_template("edit")
    end

    it "should not accept edit foreign meetings" do
      meeting = FactoryGirl.create :meeting
      user = FactoryGirl.create :user
      sign_in user
      get :edit, {:id => meeting.to_param}
      expect(response).to redirect_to(meetings_path)
    end
      
  end

  describe "POST create" do
    it "redirect when not authenticated" do
      m = FactoryGirl.build :meeting
      post :create, {:meeting => m.attributes}
      expect(response).to redirect_to(new_user_session_path)
    end
    
    describe "with valid params" do
      before :each do
        @m = FactoryGirl.build :meeting
        @user = @m.user
        sign_in @user
      end
      
      it "creates a new Meeting" do
        expect {
          post :create, {:meeting => @m.attributes}
        }.to change(Meeting, :count).by(1)
      end

      it "assigns a newly created meeting as @meeting" do
        post :create, {:meeting => @m.attributes}
        assigns(:meeting).should be_a(Meeting)
        assigns(:meeting).should be_persisted
        assigns(:meeting).user.should == @user
      end

      it "redirects to the created meeting" do
        post :create, {:meeting => @m.attributes}
        response.should redirect_to(Meeting.last)
      end
    end

    describe "with invalid params" do
      before :each do
        # Trigger the behavior that occurs when invalid params are submitted
        @user = FactoryGirl.create :user
        sign_in @user
        Meeting.any_instance.stub(:save).and_return(false)
        post :create, {:meeting => {}}
      end
      
      it "assigns a newly created but unsaved meeting as @meeting" do
        assigns(:meeting).should be_a_new(Meeting)
      end

      it "re-renders the 'new' template" do
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    it "should not update if not authenticated" do
      m = FactoryGirl.create :meeting
      m2 = FactoryGirl.build :meeting
      put :update, {:id => m.to_param, :meeting => m2.attributes}
      expect(response).to redirect_to(new_user_session_path)
    end

    it "should reject update when not owner of meeting" do 
      m = FactoryGirl.create :meeting
      m2 = FactoryGirl.build :meeting
      u = FactoryGirl.create :user
      sign_in u
      put :update, {:id => m.to_param, :meeting => m2.attributes}
      expect(response).to redirect_to(meetings_path)
    end
      
    describe "with valid params" do
      before :each do
        @m = FactoryGirl.create :meeting
        m2 = FactoryGirl.build :meeting
        @attrs = m2.attributes.merge(:id => @m.id)
        @user = @m.user
        sign_in @user
      end

      it "assigns the requested meeting as @meeting" do
        put :update, {:id => @m.to_param, :meeting => @attrs}
        assigns(:meeting).should eq(@m)
      end

      it "redirects to the meeting" do
        put :update, {:id => @m.to_param, :meeting => @attrs}
        response.should redirect_to(@m)
      end
    end
  end

  describe "DELETE destroy" do
    it "should reject when not authenticated" do
      m = FactoryGirl.create :meeting
      delete :destroy, {:id => m.to_param}
      expect(response).to redirect_to(new_user_session_path)
    end

    it "should reject when not owner of meeting" do
      m = FactoryGirl.create :meeting
      u = FactoryGirl.create :user
      sign_in u
      delete :destroy, {:id => m.to_param}
      expect(response).to redirect_to(meetings_path)
    end
    
    it "destroys the requested meeting" do
      meeting = FactoryGirl.create :meeting
      sign_in meeting.user
      expect {
        delete :destroy, {:id => meeting.to_param}
      }.to change(Meeting, :count).by(-1)
    end

    it "redirects to the meetings list" do
      meeting = FactoryGirl.create :meeting
      sign_in meeting.user
      delete :destroy, {:id => meeting.to_param}
      response.should redirect_to(meetings_url)
    end
  end
end
