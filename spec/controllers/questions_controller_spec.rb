require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe QuestionsController do

  describe "GET show" do
    it "assigns the requested question as @question" do
      question = FactoryGirl.create :question
      get :show, {:id => question.to_param}
      assigns(:question).should eq(question)
    end
  end

  describe "GET new" do
    describe "whtout authorization" do
      before :each do
        @s = FactoryGirl.create :section
      end
    
      it "should require authentication" do
        get :new, {:section_id => @s.id}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is owner of section" do
        sign_in FactoryGirl.create(:user)
        get :new, {:section_id => @s.id}
        expect(response).to redirect_to(@s)
      end
    end
    describe "with authorization" do
      before :each do
        @s = FactoryGirl.create :section
        @user = @s.meeting.user
        sign_in @user
      end
      
      it "assigns a new question as @question" do
        get :new, {:section_id => @s.id}
        assigns(:question).should be_a_new(Question)
      end
    end
  end

  describe "GET edit" do
    describe "without authentication" do
      before :each do
        @q = FactoryGirl.create :question
      end
      
      it "should require authentication" do
        get :edit, {:id => @q.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is owner of the section" do
        sign_in FactoryGirl.create(:user)
        get :edit, {:id => @q.to_param}
        expect(response).to redirect_to(@q.section)
      end
    end

    describe "with authentication" do
      before :each do
        @q = FactoryGirl.create :question
        @user = @q.section.meeting.user
        sign_in @user
      end

      it "assigns the requested question as @question" do
        get :edit, {:id => @q.to_param}
        assigns(:question).should eq(@q)
      end
    end
  end

  describe "POST create" do
    describe "whtout authentication" do
      before :each do
        @q = FactoryGirl.build :question
      end

      it "should require authentication" do
        post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is owner of section" do
        sign_in FactoryGirl.create(:user)
        post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
        expect(response).to redirect_to(@q.section)
      end
    end
    
    describe "with authentication" do
      before :each do
        @q = FactoryGirl.build :question
        @user = @q.section.meeting.user
        sign_in @user
      end
      
      describe "with valid params" do
        it "creates a new Question" do
          expect {
            post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
          }.to change(Question, :count).by(1)
        end

        it "assigns a newly created question as @question" do
          post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
          assigns(:question).should be_a(Question)
          assigns(:question).should be_persisted
        end

        it "redirects to the created question" do
          post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
          response.should redirect_to(Question.last)
        end

        it "should be assigned to section" do
          post :create, {:question => @q.attributes, :section => {:id => @q.section.id}}
          assigns(:question).section.id.should == @q.section.id
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved question as @question" do
          # Trigger the behavior that occurs when invalid params are submitted
          Question.any_instance.stub(:save).and_return(false)
          post :create, {:question => {}, :section => {:id => @q.section.id}}
          assigns(:question).should be_a_new(Question)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Question.any_instance.stub(:save).and_return(false)
          post :create, {:question => {}, :section => {:id => @q.section.id}}
          response.should render_template("new")
        end
      end
    end
  end

  describe "PUT update" do
    describe "without authentication" do
      before :each do
        @q = FactoryGirl.create :question
        @q2 = FactoryGirl.build :question
      end

      it "should require authentication" do
        put :update, {:id => @q.to_param, :question => @q2.attributes}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is owner of section" do
        sign_in FactoryGirl.create(:user)
        put :update, {:id => @q.to_param, :question => @q2.attributes}
        expect(response).to redirect_to(@q.section)
      end
    end

    describe "with authentication" do
      before :each do
        @q = FactoryGirl.create :question
        @q2 = FactoryGirl.build :question
        @user = @q.section.meeting.user
        sign_in @user
      end
    
      describe "with valid params" do
        it "assigns the requested question as @question" do
          put :update, {:id => @q.to_param, :question => @q2.attributes}
          assigns(:question).should eq(@q)
        end

        it "redirects to the question's section" do
          put :update, {:id => @q.to_param, :question => @q2.attributes}
          response.should redirect_to(@q.section)
        end
      end

      describe "with invalid params" do
        it "assigns the question as @question" do
          # Trigger the behavior that occurs when invalid params are submitted
          Question.any_instance.stub(:save).and_return(false)
          put :update, {:id => @q.to_param, :question => {}}
          assigns(:question).should eq(@q)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Question.any_instance.stub(:save).and_return(false)
          put :update, {:id => @q.to_param, :question => {}}
          response.should render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do
    describe "without authentication" do
      before :each do
        @q = FactoryGirl.create :question
      end

      it "should require authentication" do
        delete :destroy, {:id => @q.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is owner of section" do
        sign_in FactoryGirl.create(:user)
        delete :destroy, {:id => @q.to_param}
        expect(response).to redirect_to(@q.section)
      end
    end

    describe "with authentication" do
      before :each do
        @q = FactoryGirl.create :question
        @user = @q.section.meeting.user
        sign_in @user
      end
      
      it "destroys the requested question" do
        expect {
          delete :destroy, {:id => @q.to_param}
        }.to change(Question, :count).by(-1)
      end

      it "redirects to the questions list" do
        delete :destroy, {:id => @q.to_param}
        response.should redirect_to(@q.section)
      end
    end
  end
end
