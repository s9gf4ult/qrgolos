require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AnswerVariantsController do

  describe "GET show" do
    it "assigns the requested answer_variant as @answer_variant" do
      answer_variant = FactoryGirl.create :answer_variant
      get :show, {:id => answer_variant.to_param}
      assigns(:answer_variant).should eq(answer_variant)
    end
  end

  describe "GET new" do
    describe "withou authentication" do
      before :each do
        @aw = FactoryGirl.build :answer_variant
      end

      it "should require authentication" do
        get :new, {:question_id => @aw.question.id}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is section's owner" do
        sign_in FactoryGirl.create(:user)
        get :new, {:question_id => @aw.question.id}
        expect(response).to redirect_to(@aw.question)
      end
    end

    describe "with authentication" do
      before :each do
        @aw = FactoryGirl.build :answer_variant
        @user = @aw.question.section.meeting.user
        sign_in @user
      end
    
      it "assigns a new answer_variant as @answer_variant" do
        get :new, {:question_id => @aw.question.id}
        assigns(:answer_variant).should be_a_new(AnswerVariant)
      end

      it "should render 'new' template" do
        get :new, {:question_id => @aw.question.id}
        expect(response).to render_template("new")
      end
    end
  end

  describe "GET edit" do
    describe "without authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
      end

      it "should require authentication" do
        get :edit, {:id => @aw.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is section's owner" do
        sign_in FactoryGirl.create(:user)
        get :edit, {:id => @aw.to_param}
        expect(response).to redirect_to(@aw.question)
      end
    end

    describe "with authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
        @user = @aw.question.section.meeting.user
        sign_in @user
      end

      it "assigns the requested answer_variant as @answer_variant" do
        get :edit, {:id => @aw.to_param}
        assigns(:answer_variant).should eq(@aw)
      end

      it "should render 'edit' template" do
        get :edit, {:id => @aw.to_param}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "POST create" do
    describe "without authentication" do
      before :each do
        @aw = FactoryGirl.build :answer_variant
      end

      it "should require authentication" do
        post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is section's owner" do
        sign_in FactoryGirl.create(:user)
        post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
        expect(response).to redirect_to(@aw.question)
      end
    end

    describe "with authentication" do
      before :each do
        @aw = FactoryGirl.build :answer_variant
        @user = @aw.question.section.meeting.user
        sign_in @user
      end
    
      describe "with valid params" do
        it "creates a new AnswerVariant" do
          expect {
            post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
          }.to change(AnswerVariant, :count).by(1)
        end

        it "creates a question's AnswerVariant" do
          expect do
            post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
          end.to change(@aw.question.answer_variants, :count).by(1)
        end

        it "assigns a newly created answer_variant as @answer_variant" do
          post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
          assigns(:answer_variant).should be_a(AnswerVariant)
          assigns(:answer_variant).should be_persisted
        end

        it "redirects to the created answer_variant" do
          post :create, {:answer_variant => @aw.attributes, :question => {:id => @aw.question.id}}
          response.should redirect_to(@aw.question)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved answer_variant as @answer_variant" do
          # Trigger the behavior that occurs when invalid params are submitted
          AnswerVariant.any_instance.stub(:save).and_return(false)
          post :create, {:answer_variant => {}, :question => {:id => @aw.question.id}}
          assigns(:answer_variant).should be_a_new(AnswerVariant)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          AnswerVariant.any_instance.stub(:save).and_return(false)
          post :create, {:answer_variant => {}, :question => {:id => @aw.question.id}}
          response.should render_template("new")
        end
      end
    end
  end

  describe "PUT update" do
    describe "without authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
        @aw2 = FactoryGirl.build :answer_variant
      end

      it "should require authentication" do
        put :update, {:id => @aw.to_param, :answer_variant => @aw2.attributes}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is section's owner" do
        sign_in FactoryGirl.create(:user)
        put :update, {:id => @aw.to_param, :answer_variant => @aw2.attributes}
        expect(response).to redirect_to(@aw.question)
      end
    end

    describe "with authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
        @aw2 = FactoryGirl.build :answer_variant
        @user = @aw.question.section.meeting.user
        sign_in @user
      end
    
      describe "with valid params" do
        it "assigns the requested answer_variant as @answer_variant" do
          put :update, {:id => @aw.to_param, :answer_variant => @aw2.attributes}
          assigns(:answer_variant).should eq(@aw)
        end

        it "redirects to the question" do
          put :update, {:id => @aw.to_param, :answer_variant => @aw2.attributes}
          response.should redirect_to(@aw.question)
        end
      end

      describe "with invalid params" do
        it "assigns the answer_variant as @answer_variant" do
          # Trigger the behavior that occurs when invalid params are submitted
          AnswerVariant.any_instance.stub(:save).and_return(false)
          put :update, {:id => @aw.to_param, :answer_variant => {}}
          assigns(:answer_variant).should eq(@aw)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          AnswerVariant.any_instance.stub(:save).and_return(false)
          put :update, {:id => @aw.to_param, :answer_variant => {}}
          response.should render_template("edit")
        end
      end
    end
  end
  
  describe "DELETE destroy" do
    describe "without authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
      end

      it "should require authentication" do
        delete :destroy, {:id => @aw.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end

      it "should require user is section's owner" do
        sign_in FactoryGirl.create(:user)
        delete :destroy, {:id => @aw.to_param}
        expect(response).to redirect_to(@aw.question)
      end
    end

    describe "with authentication" do
      before :each do
        @aw = FactoryGirl.create :answer_variant
        @user = @aw.question.section.meeting.user
        sign_in @user
      end
      
      it "destroys the requested answer_variant" do
        expect {
          delete :destroy, {:id => @aw.to_param}
        }.to change(AnswerVariant, :count).by(-1)
      end

      it "redirects to the answer_variants list" do
        delete :destroy, {:id => @aw.to_param}
        response.should redirect_to(@aw.question)
      end
    end
  end
end
